import pdb
SCRIPT="python3.4 /home/jandrasitsc/scripts/multiplegenomealignment/multiplegenome.py"
with open(config["genomefile"], "r") as f:
    GENOMES = f.readlines()

GENOME_DICT = {line.split(";")[1].strip() : line.split(";")[0] for line in GENOMES}
GENOME_NAMES = [line.split(";")[1].strip() for line in GENOMES]

# merge if alignment is not split
# merging is done in splitting step anyway
def split_or_not(wildcards):
    return(wildcards['genomes']+"_split.xmfa" if len(wildcards['genomes'].split("+")) > 2 else wildcards['genomes']+"_realign.xmfa")


def mauve_input(wildcards):
    genomes_arr = wildcards['genomes'].split("+")
    last_genome = genomes_arr[-1]
    
    return (GENOME_DICT[last_genome])
    
    
def consensus_file(wildcards):
    genomes_arr = wildcards['genomes'].split("+")
    
    first_genomes = genomes_arr[:-1]
    
    if len(first_genomes) == 1:
        consgen = GENOME_DICT[first_genomes[0]]
    else:
        consgen = "+".join(first_genomes)+"_consensus.fasta.blockseparated.fasta"
        
    return consgen
    
    
    
    
rule all:
    input:"+".join(GENOME_NAMES)+"_consensus.fasta.blockseparated.fasta"
    
    
rule consensus:
    input: split_or_not
    
    output:"{genomes,[^_]+}_consensus.fasta.blockseparated.fasta"
    
    shell:
        "{SCRIPT} -x {input} -p . -n {wildcards.genomes} -t consensus"
        

rule split:
    input: xmfa="{genomes}_realign.xmfa", consensus=consensus_file
    output: "{genomes,[^_]+}_split.xmfa"
    shell:
        "{SCRIPT} -x {input.xmfa} -p . -n {wildcards.genomes} -t split -c {input.consensus}"
        
        
rule realign:
    input: "{genomes}.xmfa"
    output: "{genomes,[^_]+}_realign.xmfa"
    shell:
        "{SCRIPT} -x {input} -p . -n {wildcards.genomes} -t realign"

        
rule merge:
    input: "{genomes}_realign.xmfa"
    output: "{genomes}_merge.xmfa"
    shell:
        "{SCRIPT} -x {input} -p . -n {wildcards.genomes} -t merge"        
        
        
rule align:
    input: consensus_file, mauve_input
    output: "{genomes,[^_]+}.xmfa"
    log: "{genomes}.progressiveMauve.log.txt"
    shell:
        "progressiveMauve {input[0]} {input[1]} --output={output} > {log}"
