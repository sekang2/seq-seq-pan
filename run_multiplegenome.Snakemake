import pdb
SCRIPT="python3.4 /home/jandrasitsc/scripts/multiplegenomealignment/multiplegenome.py"
with open(config["genomefile"], "r") as f:
    GENOMES = f.readlines()

#GENOME_DICT = {line.split(";")[1].strip() : line.split(";")[0] for line in GENOMES}
#GENOME_NAMES = [line.split(";")[1].strip() for line in GENOMES]

GENOME_DICT = {str(idx): {"name": GENOMES[idx].split(";")[1].strip(), "file":GENOMES[idx].split(";")[0].strip()} for idx in range(len(GENOMES))}
GENOME_NAMES = [str(idx) for idx in range(len(GENOMES))]

# merge if alignment is not split
# merging is done in splitting step anyway
def split_or_not(wildcards):
    return(wildcards['genomes']+"_split.xmfa" if len(wildcards['genomes'].split("+")) > 2 else wildcards['genomes']+"_realign.xmfa")
    

def mauve_input(wildcards):
    genomes_arr = wildcards['genomes'].split("+")
    last_genome = genomes_arr[-1]
    
    return (GENOME_DICT[last_genome]["file"])
    
    
def consensus_file(wildcards):
    genomes_arr = wildcards['genomes'].split("+")
    
    first_genomes = genomes_arr[:-1]
    
    if len(first_genomes) == 1:
        consgen = GENOME_DICT[first_genomes[0]]["file"]
    else:
        consgen = "+".join(first_genomes)+"_consensus.fasta.blockseparated.fasta"
        
    return consgen
    

rule all:
    input: config["outfilename"]+"_consensus.fasta"
    
    
rule fn_translate:
    input:"+".join(GENOME_NAMES)+"_consensus.fasta.blockseparated.fasta"
    output: config["outfilename"]+"_consensus.fasta"
    shell:
        '''
        name={input}
        out={output}
        name="${{name//_consensus.fasta.blockseparated.fasta}}"
        out="${{out//_consensus.fasta}}"
        cp $name"_consensus.fasta.blockseparated.fasta" $out"_consensus.fasta.blockseparated.fasta"
        cp $name"_consensus.fasta" $out"_consensus.fasta"
        cp $name"_consensus.fasta.idx" $out"_consensus.fasta.idx"
        cp $name"_split.xmfa" $out"_split.xmfa"
        '''
    
rule consensus:
    input: split_or_not
    
    output:"{genomes,((?!_consensus).)*}_consensus.fasta.blockseparated.fasta"
    
    shell:
        "{SCRIPT} -x {input} -p . -n {wildcards.genomes} -t consensus"
        

rule split:
    input: xmfa="{genomes}_realign.xmfa", consensus=consensus_file
    output: "{genomes,((?!_split).)*}_split.xmfa"
    shell:
        "{SCRIPT} -x {input.xmfa} -p . -n {wildcards.genomes} -t split -c {input.consensus}"
        
        
rule realign:
    input: "{genomes}.xmfa"
    output: "{genomes,((?!_realign).)*}_realign.xmfa"
    shell:
        "{SCRIPT} -x {input} -p . -n {wildcards.genomes} -t realign"

        
rule merge:
    input: "{genomes}_realign.xmfa"
    output: "{genomes,((?!_merge).)*}_merge.xmfa"
    shell:
        "{SCRIPT} -x {input} -p . -n {wildcards.genomes} -t merge"        
        
        
rule align:
    input: consensus_file, mauve_input
    output: "{genomes}.xmfa"
    log: "{genomes}.progressiveMauve.log.txt"
    shell:
        "progressiveMauve {input[0]} {input[1]} --output={output} --max-gapped-aligner-length=900 > {log} "
